#!/usr/bin/env node
var argv = process.argv.slice(2),
    util = require("util"),
    fs   = require("fs"),
    fd   = require("path")
    
var isDir = function(path){
  try{
    return (fs.statSync(path).isDirectory());
  } catch (err) {
    return false;
  }
};
var isFile = function(path){
  try{
    return (fs.statSync(path).isFile());
  } catch (err) {
    return false;
  }
};

var expandPath = function(path, dir){
  if (fd.basename(path) == path)
    path = dir + path  
  return fd.normalize(path);
};

var camelize = function(str){
  return str.replace(/-|_+(.)?/g, function(match, chr) {
    return chr ? chr.toUpperCase() : '';
  }).replace(/^(.)?/, function(match, chr) {
    return chr ? chr.toUpperCase() : '';
  });
};
    
var Template = function(template, path, values){
  this.template = fd.resolve(template);
  this.path     = fd.resolve(path);
  this.values   = values || {};
};

Template.prototype.__defineGetter__("files", function(){
  if ( !isDir(this.template) )
    return [this.template];
  
    var self = this, 
        files = [];

    (function next(dir) {
      console.log(dir);
      fs.readdirSync(dir).forEach(function(file){
        files.push(file = dir + '/' + file);
        if (isDir(file)) next(file);
      });
    })(this.template);
  return files;
});

Template.prototype.write = function(){
  this.files.forEach(function(path){
    var out = path.replace(this.template, "");
    out = fd.join(this.path, out);
    out = fd.normalize(out);
    if ( isDir(path) ) {
      fs.mkdirSync(out, 0775);
    } else if (fd.existsSync(out)) {
      error(path + " already exists")
    } else {
      var data = this.parse(fs.readFileSync(path, "utf8"));
      fs.writeFileSync(out, data);
    }
  }, this);
  util.puts("Created spine application in " + this.path);
};

Template.prototype.parse = function(data){
  var self = this;
  return data.replace(/\{\{([^}]+)\}\}/g, function(_, key){
    return self.values[key];
  });
};

var findDirs = function(root) { 
  var dirs = [];

  fs.readdirSync(root).forEach(function(name){
    if (isDir(root + '/' + name)) {
      dirs.push(name);
    };
  });

  return dirs;
}

var help = [
    "usage: spine [options] [template]",
    "",
    "Generates a spine app using the specified command-line options",
    "",
    "options:",
    " app path          Generates a new Spine application, non-default template optional",
    " controller name   Generates a Spine Controller",
    " model name        Generates a Spine Model",
    "template (optional): ",
    " " + findDirs(__dirname + '/../templates/').join("\n ")
].join('\n');

var generators = {};


var templates = [];
var getTemplatePath = function(templateName) {

  var template  = templateName || 'default';
  var templates = findDirs(__dirname + '/../templates/');

  if (templates.indexOf(template) == -1) {
    util.error("Error: template '" + template + "' doesn't exist");	
    process.exit(1);
  }
  return __dirname + "/../templates/" + template;
}

function error(msg, errorCode) {
    util.error('ERROR: ' + msg);
    process.exit(errorCode || 1);
}

generators.app = function(){
  var templatePath = getTemplatePath(argv[2]) + "/app";

  if (!isDir(templatePath)) {
    error(argv[2] + " template doesn't have an app template");
  };

  var path = fd.normalize(argv[1]);
  
  // Create parent dir
  if (fd.existsSync(path)) {
  	error(path + " already exists");
  }

  fs.mkdirSync(path, 0775);
  
  (new Template(templatePath, path)).write();
};

generators.templates = function() {	
  util.puts(findDirs(__dirname + '/../templates/').join(', '));
}

generators.controller = function(){
  var templatePath = getTemplatePath(argv[2]);
  if (!isFile(templatePath + '/controller.coffee')) {
    error(argv[2] + " template doesn't have a controller template");
  };

  var values   = {name: camelize(fd.basename(argv[1]))};
  var path     = expandPath(argv[1], "./app/controllers/");
  if ( !fd.extname(path) ) path += ".coffee";
  
  (new Template(templatePath, path, values)).write();
};

generators.model = function(){
  var templatePath = getTemplatePath(argv[2]);

  if (!isFile(templatePath + "/model.coffee")) {
    error(argv[2] + " template doesn't have a model template");
  };

  var values   = {name: camelize(fd.basename(argv[1]))};
  var path     = expandPath(argv[1], "./app/models/");

  if ( !fd.extname(path) ) path += ".coffee";
  
  (new Template(templatePath, path, values)).write();
};

if (generators[argv[0]])
  generators[argv[0]]();
else
  util.puts(help);

